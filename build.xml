<project name="hello-ivy" default="all" xmlns:ivy="antlib:org.apache.ivy.ant">

    <property name="project.name" value="structurizr"/>

    <property name="build.dir" value="${basedir}/build"/>
    <property name="dist.dir" value="${build.dir}/dist"/>

    <property name="annotations.dir" value="${basedir}/annotations" />
    <property name="annotations.build.dir" value="${build.dir}/annotations" />

    <property name="client.dir" value="${basedir}/client" />
    <property name="client.build.dir" value="${build.dir}/client" />

    <property name="core.dir" value="${basedir}/core" />
    <property name="core.build.dir" value="${build.dir}/core" />

    <property name="examples.dir" value="${basedir}/examples" />
    <property name="examples.build.dir" value="${build.dir}/examples" />

    <property name="spring.dir" value="${basedir}/spring" />
    <property name="spring.build.dir" value="${build.dir}/spring" />

    <property name="test.lib.dir" value="${basedir}/lib/test"/>
    <property name="client.lib.dir" value="${client.dir}/lib"/>
    <property name="core.lib.dir" value="${core.dir}/lib"/>
    <property name="spring.lib.dir" value="${spring.dir}/lib"/>

    <target name="init" depends="clean">
        <mkdir dir="${build.dir}"/>

        <mkdir dir="${annotations.build.dir}"/>
        <mkdir dir="${annotations.build.dir}/production-classes"/>

        <mkdir dir="${client.lib.dir}" />
        <mkdir dir="${client.build.dir}"/>
        <mkdir dir="${client.build.dir}/production-classes"/>
        <mkdir dir="${client.build.dir}/test-classes"/>

        <mkdir dir="${core.lib.dir}" />
        <mkdir dir="${core.build.dir}"/>
        <mkdir dir="${core.build.dir}/production-classes"/>
        <mkdir dir="${core.build.dir}/test-classes"/>

        <mkdir dir="${examples.build.dir}"/>
        <mkdir dir="${examples.build.dir}/production-classes"/>

        <mkdir dir="${spring.lib.dir}" />
        <mkdir dir="${spring.build.dir}"/>
        <mkdir dir="${spring.build.dir}/production-classes"/>
        <mkdir dir="${spring.build.dir}/test-classes"/>
    </target>

    <target name="compile" depends="init">
        <javac srcdir="${annotations.dir}/src" destdir="${annotations.build.dir}/production-classes" debug="yes" source="1.7" target="1.7" />

        <javac srcdir="${core.dir}/src" destdir="${core.build.dir}/production-classes" debug="yes">
            <classpath>
                <fileset dir="${core.lib.dir}" includes="*.jar" />
                <pathelement location="${annotations.build.dir}/production-classes" />
            </classpath>
        </javac>

        <javac srcdir="${core.dir}/test/unit" destdir="${core.build.dir}/test-classes" debug="yes">
            <classpath>
                <fileset dir="${test.lib.dir}" includes="*.jar" />
                <pathelement location="${core.build.dir}/production-classes" />
            </classpath>
        </javac>

        <javac srcdir="${client.dir}/src" destdir="${client.build.dir}/production-classes" debug="yes">
            <classpath>
                <fileset dir="${client.lib.dir}" includes="*.jar" />
                <pathelement location="${core.build.dir}/production-classes" />
            </classpath>
        </javac>

        <javac srcdir="${client.dir}/test/unit" destdir="${client.build.dir}/test-classes" debug="yes">
            <classpath>
                <fileset dir="${test.lib.dir}" includes="*.jar" />
                <pathelement location="${client.build.dir}/production-classes" />
                <pathelement location="${core.build.dir}/production-classes" />
            </classpath>
        </javac>

        <javac srcdir="${spring.dir}/src" destdir="${spring.build.dir}/production-classes" debug="yes">
            <classpath>
                <fileset dir="${spring.lib.dir}" includes="*.jar" />
                <pathelement location="${core.build.dir}/production-classes" />
            </classpath>
        </javac>

        <javac srcdir="${examples.dir}/src" destdir="${examples.build.dir}/production-classes" debug="yes">
            <classpath>
                <fileset dir="${client.lib.dir}" includes="*.jar" />
                <fileset dir="${core.lib.dir}" includes="*.jar" />
                <fileset dir="${spring.lib.dir}" includes="*.jar" />
                <pathelement location="${annotations.build.dir}/production-classes" />
                <pathelement location="${client.build.dir}/production-classes" />
                <pathelement location="${core.build.dir}/production-classes" />
                <pathelement location="${spring.build.dir}/production-classes" />
            </classpath>
        </javac>
    </target>

    <target name="unit-tests" depends="compile">
        <junit printsummary="yes" haltonfailure="yes">
            <classpath>
                <fileset dir="${core.lib.dir}" includes="*.jar" />
                <fileset dir="${test.lib.dir}" includes="*.jar" />
                <pathelement location="${core.build.dir}/production-classes" />
                <pathelement location="${core.build.dir}/test-classes"/>
            </classpath>

            <formatter type="plain"/>

            <batchtest fork="no" todir="${build.dir}">
                <fileset dir="${core.dir}/test/unit">
                    <include name="**/*Tests.java"/>
                </fileset>
            </batchtest>
        </junit>

        <junit printsummary="yes" haltonfailure="yes">
            <classpath>
                <fileset dir="${client.lib.dir}" includes="*.jar" />
                <fileset dir="${test.lib.dir}" includes="*.jar" />
                <pathelement location="${client.build.dir}/production-classes" />
                <pathelement location="${client.build.dir}/test-classes"/>
                <pathelement location="${core.build.dir}/production-classes" />
            </classpath>

            <formatter type="plain"/>

            <batchtest fork="no" todir="${build.dir}">
                <fileset dir="${client.dir}/test/unit">
                    <include name="**/*Tests.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="build" depends="unit-tests">
        <jar jarfile="${build.dir}/structurizr-annotations.jar">
            <fileset dir="${annotations.build.dir}/production-classes"/>
        </jar>

        <jar jarfile="${build.dir}/structurizr-client.jar">
            <fileset dir="${client.build.dir}/production-classes"/>
        </jar>

        <jar jarfile="${build.dir}/structurizr-core.jar">
            <fileset dir="${core.build.dir}/production-classes"/>
        </jar>

        <jar jarfile="${build.dir}/structurizr-spring.jar">
            <fileset dir="${spring.build.dir}/production-classes"/>
        </jar>
    </target>

    <target name="dist" depends="build">
        <mkdir dir="${dist.dir}"/>

        <copy todir="${dist.dir}/annotations">
            <fileset dir="${build.dir}" includes="structurizr-annotations.jar" />
        </copy>

        <copy todir="${dist.dir}/client">
            <fileset dir="${build.dir}" includes="structurizr-client.jar" />
        </copy>
        <copy todir="${dist.dir}/client/lib">
            <fileset dir="${client.lib.dir}" includes="*.jar" />
        </copy>

        <copy todir="${dist.dir}/core">
            <fileset dir="${build.dir}" includes="structurizr-core.jar" />
        </copy>
        <copy todir="${dist.dir}/core/lib">
            <fileset dir="${core.lib.dir}" includes="*.jar" />
        </copy>

        <copy todir="${dist.dir}/spring">
            <fileset dir="${build.dir}" includes="structurizr-spring.jar" />
        </copy>
        <copy todir="${dist.dir}/spring/lib">
            <fileset dir="${spring.lib.dir}" includes="*.jar" />
        </copy>

        <zip destfile="${build.dir}/${project.name}.zip">
            <fileset dir="${dist.dir}"/>
        </zip>
    </target>

    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

    <target name="resolve" depends="init" description="--> retreive dependencies with ivy">
        <delete>
            <fileset dir="${client.lib.dir}" includes="*.jar" />
            <fileset dir="${core.lib.dir}" includes="*.jar" />
            <fileset dir="${spring.lib.dir}" includes="*.jar" />
            <fileset dir="${test.lib.dir}" includes="*.jar" />
        </delete>

        <ivy:retrieve conf="client" pattern="${client.lib.dir}/[artifact].[ext]"/>
        <ivy:retrieve conf="core" pattern="${core.lib.dir}/[artifact].[ext]"/>
        <ivy:retrieve conf="spring" pattern="${spring.lib.dir}/[artifact].[ext]"/>
        <ivy:retrieve conf="test" pattern="${test.lib.dir}/[artifact].[ext]"/>
    </target>

	<target name="clean-cache" description="--> clean the ivy cache">
		<ivy:cleancache />
	</target>

    <target name="all" depends="resolve, dist" />

</project>
